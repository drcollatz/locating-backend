buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.asciidoctor.convert'

jar {
    baseName = 'locating-backend'
    version = '0.1.0'
    dependsOn asciidoctor
    from ("build/docs/output/html5"){
        into 'static/docs'
    }
}


mainClassName = "com.fh.locating.Application"

repositories {
    mavenCentral()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile 'org.springframework.data:spring-data-rest-hal-browser'
    
    // http://mvnrepository.com/artifact/joda-time/joda-time
	compile group: 'joda-time', name: 'joda-time', version: '2.9.3'
	compile("com.fasterxml.jackson.datatype:jackson-datatype-joda:2.4.2");
	
	// https://mvnrepository.com/artifact/com.cloudinary/cloudinary-http42
	compile group: 'com.cloudinary', name: 'cloudinary-http42', version: '1.4.5'

	
	
	
	compile("org.springframework.boot:spring-boot-starter-test")
	testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.0.1.RELEASE'
	testCompile("junit:junit")
    testCompile group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "1.50.1"
    
    
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir 
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}

ext { 
    snippetsDir = file('build/docs/input')
}

test { 
    outputs.dir snippetsDir
}

build {
    dependsOn asciidoctor
}

asciidoctor.outputs.upToDateWhen { false }

task copyTask(type: Copy) {
	dependsOn test
    from 'src/docs'
    into 'build/docs/input'
}

asciidoctor {

    dependsOn copyTask
    sourceDir = snippetsDir
    outputDir file('build/docs/output')
    inputs.dir snippetsDir
    backends 'html5', 'pdf'
    attributes 'source-highlighter' : 'prettify',
            'imagesdir':'images',
            'icons': 'font',
            'setanchors':'true',
            'idprefix':'',
            'idseparator':'-',
            'docinfo1':'true',
            'snippets': snippetsDir
}
